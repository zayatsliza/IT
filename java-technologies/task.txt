Загальна постановка задачі та варіанти

лабораторного практикуму

Задача:

"Фрагментарна реалізація систем управління табличними базами даних"

І. Загальні вимоги

Основні вимоги щодо структури бази:

кількість таблиць принципово не обмежена (реляції між таблицями не враховувати);
кількість полів та кількість записів у кожній таблиці також принципово не обмежені.
У кожній роботі треба забезпечити підтримку (для полів у таблицях) наступних (загальних для всіх варіантів!) типів:

integer;
real;
char;
string.
Також у кожній роботі треба реалізувати функціональну підтримку для:

створення бази;
створення (із валідацією даних) та знищення таблиці з бази;
перегляду та редагування рядків таблиці;
збереження табличної бази на диску та, навпаки, зчитування її з диску.
ІІ. Варіанти додаткових типів

Потрібно забезпечити підтримку (для можливого використання у таблицях) двох додаткових типів у відповідності з одним із наступних варіантів:

0) color (RGB код кольору); colorInvl;
1) текстові файли; integerInvl;
*2) html-файли; stringInvl;
3) charInvl; string(charInvl);
4) перелiчуваний тип (множину значень складає набiр рядкiв); email;
5) date; dateInvl;
*6) time; timeInvl;
7) $ (грошовий форматний тип, max$ =10,000,000,000,000.00); $Invl;
8) complexInteger; complexReal;
9) picture-файли (один з форматів); realInvl;

Примiтка. Типи із суфіксом Invl (наприклад, colorInvl, integerInvl тощо) є "iнтервальними" типами.

ІІІ. Варіанти додаткових операцiй над таблицями

Потрібно реалізувати операцiї над таблицями у відповідності з варіантом:

0) сортування таблиці за одним ключем;
1) пошук (за шаблоном) та перегляд знайдених рядкiв таблицi;
2) об'єднання таблиць;
3) рiзниця таблиць;
4) перетин таблиць;
*5) вилучення повторюваних рядкiв у таблиці;
6) прямий добуток двох таблиць;
*7) проекцiя таблиць;
8) сполучення таблиць (за спiльним полем);
9) перейменування та/або перестановка колонок таблиці (з відповідною зміною схеми таблиці).

IV. Варіанти індивідуальних завдань

Загалом, окремий варіант індивідуального завдання визначається парою:

варіант додаткових типів даних (розділ II);
варіант додаткових операцій над таблицями бази (розділ III).

V. Завдання лабораторного практикуму

Попередній етап

+0) Попередній етап (нульовий етап, допуск до виконання). Функціональна специфікація системи управління табличними базами даних (СУТБД) у вигляді однієї або кількох діаграм прецедентів UML.
Без здачі попереднього етапу не приймається жоден з основних етапів лабораторного практикуму.
Основні етапи

Основні етапи можуть виконуватись у будь-якому порядку до того ж вибірково (треба обрати 10 із нижче запропонованих 15).
Перелік варіантів основних етапів:
+1) Використання UML при проектуванні та специфікації програмних систем.

Розробити щонайменше 12 UML-діаграм:

діаграм варіантів використання (діаграм прецедентів) - 1..* (щонайменше до трьох прецедентів потрібно описати потоки подій);
діаграм класів - 2..*. Щонайменше одна з них має містити класи "Таблиця" та "База", подаючи відношення як між цими класами, так і з класами, що використовуються для опису схем, рядків таблиці тощо. Щонайменше одна з діаграм має бути VOPC-діаграмою для “індивідуального” прецедента (відповідно до варіанту додаткової “індивідуальної” операції - див. розділ III ). (VOPC - це абревіатура від View Of Participating Classes);
діаграм діяльності - 0..*;.
діаграм взаємодії - 4..*. Щонайменше одна з діаграм має бути побудованою для “індивідуального” прецедента (у відповідності до варіанта додаткової операції).
діаграм станів - 0..*;
діаграм компонентів - 2..* (щонайменше по одній - для нерозподіленої та розподіленої версій системи відповідно);
діаграм розгортання - 1..* (щонайменше - для розподіленої системи).
++2-3) Розробка локальної (нерозподіленої) версії СУТБД (із власною реалізацією класів "Таблиця" та "База"). Обов'язкові при виконанні пункти:

Розробка (власних!) класів для понять "Таблиця", "База" та, можливо, деяких інших класів, спряжених із поняттям "Таблиця" (наприклад, "Схема таблиці", "Атрибут", "Рядок таблиці" тощо).
Створення UML-діаграми класів (з наявними між класами відношеннями).
Проведення unit-тестування. Надати 3..* тести, один з яких має бути призначеним для тестуванням “індивідуальної” (варіантної) операції з розділу III.
Забезпечення дружнього інтерфейсу системи.
+4-5) Два варіанти розподілених версій системи (із реалізацією програм-клієнтів та програм-серверів), використовуючи за власним вибором будь-які дві з наступних технологій: Java RMI/JRMP, Java RMI/IIOP, Net Remoting, WCF, IIOP Net, EJB тощо.

+6) Web-сервіси (або SOAP-, SOAP/WSDL-, SOAP/XML-сервіси). Реалізація СУТБД на основі технології web-сервісів (сервер, клієнт).

7) Web-сервіси. Різні платформи. Для web-сервісу (серверної частини з попереднього етапу) розробити варіант клієнтської програми на "альтернативній платформі". Наприклад, для реалізованого на Java web-сервісу клієнтську частину можна розробити під .NET чи, навпаки, для реалізованого ASMX web-сервісу клієнтську частину можна розробити на Java). Клієнтський проект може бути функціонально обмеженим (*).

8) Варіант розподіленої версії з використанням COM або CORBA (сервер, клієнт).

9) Сумісність технологій. Серед можливих варіантів пропонуються такі: ASMX web-сервіси - WCF, Java RMI/IIOP - CORBA). Треба, наприклад, для ASMX web-сервісу (етап 6) розробити WCF-клієнт або, навпаки, для WCF-сервісу - ASMX-клієнт.

+10) REST web-сервіси (REST API). Реалізація доступу до даних, орієнтуючись на їх ієрархічну структуру: база -> таблиця -> ... та на використання HTTP-запитів (як мінімум GET, POST та DELETE). Потрібно розробити REST API сервер та продемонструвати його роботу на відповідних тестових HTTP-запитах (Postman, cURL тощо).

11) GraphQL API. Потрібно розробити GraphQL API сервер для забезпечення, як мінімум, доступу до вхідних та результуючих даних варіантної операції, надаючи можливість обирати той чи інший рівень деталізації цих даних. Для демонстрації роботи сервера на тестових клієнтських HTTP-запитах окрім традиційних засобів (Postman, cURL тощо) можна скористатись Graphiql.

+12) Web-проект. (Технології на вибір: ASP .NET, ASP .NET MVC, WPF, JSP, JavaServlet та інші, у тому числі на основі фреймворків Spring, Struts, Struts 2, JSF, Tapestry, Wicket, GWT тощо. Проект може бути функціонально обмеженим (*).

+13) Web-проект із використанням AJAX. Щонайменше повинно забезпечуватись часткове перезавантаження web-сторінки. Проект може бути функціонально обмеженим (*).

+14) Мобільний проект (Android, iOS, Windows Phone тощо). Проект може бути функціонально обмеженим (*).

+15) Варіант проекту із використанням хмарних технологій (від Microsoft, Google, Amazon, Hiroku тощо). Проект може бути функціонально обмеженим (*).

Extra_1) (3 бали). Застосування Mongo або його аналогів (замість використання серіалізації об'єктів).

Extra_2) (5 балів). Застосування реляційної СУБД (замість використання серіалізації об'єктів).

Extra_3) (4 бали). Застосування мікросервісної архітектури при реалізації бізнес-логіки проекту.

Extra_4) (3-4 бали). Інтегроване Mock-тестування у проектах, що використовують реальні СУБД (реляційні чи ні).

Extra_5) (3 бали). Інтегроване Mock-тестування для однієї із розподілених версій.

Extra_6) (2 - 5 балів). Ще одна версія Web-проекту із використанням іншої технології (іншого фреймворку). Проект може бути функціонально обмеженим (*).

Extra_7) (2 - 5 балів). Ще одна версія мобільного проекту. Проект може бути функціонально обмеженим (*).

Extra_8) (2 бали). Рефлексія (reflection). Реалізація "динамічних викликів" на прикладі одного з об'єктів клієнтської частини розподіленої версії.

Extra_9) (3 бали). Рефлексія (reflection). Інтроспекція одного з основних бізнес-об'єктів, розробка GUI для надання значень параметрам та забезпечення викликів методів такого об'єкта.

(*) ЯК МІНІМУМ має забезпечуватись демонстрація виконання варіантної операції (див. розділ III ) над таблицями даних, що також відповідають варіанту (див. розділ II).

VI. Терміни виконання завдань та форма звітування


З лабораторного практикуму готується загальний друкований звіт, який має складатись із звітів до окремих етапів (як складових частин загального звіту).

Попередній етап - виконання до 21.09.
Ще раз зауважимо, що основні етапи можуть виконуватись у довільному порядку. Тому для основних етапів нижче вказані терміни виконання по їх КІЛЬКОСТІ:
21.09 -- попередній етап;
28.09 -- 1 основний етап;
05.10 -- 2 основні етапи;
12.10 -- 3 основні етапи;
19.10 -- 4 основні етапи;
26.10 -- 5 основних етапів;
02.11 -- 6 основних етапів;
09.11 -- 7 основних етапів;
16.11 -- 8 основних етапів;
23.11 -- 9 основних етапів;
30.11 -- 10 основних етапів, друкований звіт.
За кожний повний чи неповний тиждень запізнення з виконанням етапу знімається 1 бал.


VII. Оцінювання

Виконання лабораторного практикуму (всіх етапів оцінюється) в межах 50 балів.

Нагадування: за кожен повний чи неповний тиждень запізнення із виконанням етапу знімається 1 бал.

За цікаві вирішення, прийоми, додаткові можливості можуть додаватись заохочувальні бали (до двох на етап).

Тестові контрольні роботи сумарно оцінюються в межах 10 балів, відповідь на іспиті - в межах 40 балів.